{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/classnames/index.js","assets/global/allLogos/Advanced.svg","assets/global/allLogos/Advanced1.svg","assets/global/allLogos/Advanced2.svg","assets/global/allLogos/Apprentice.svg","assets/global/allLogos/Expert.svg","assets/global/allLogos/Grandmaster.svg","assets/global/allLogos/Interested.svg","assets/global/allLogos/Master.svg","assets/global/allLogos/NoCredits.svg","assets/global/allLogos/Proficient.svg","assets/global/allLogos/Proficient1.svg","assets/global/allLogos/Pursuing.svg","assets/pages/activityPage/increase.svg","assets/pages/activityPage/decrease.svg","assets/pages/activityPage/classesAddedIcon.svg","assets/pages/activityPage/classesCompletedIcon.svg","assets/pages/activityPage/hoursWatchedIcon.svg","components/specific/progressBars/LinearProgress.jsx","pages/activityPage/components/CourseCard.jsx","pages/activityPage/components/NumberCard.jsx","pages/activityPage/components/PercentageCard.jsx","pages/activityPage/components/barChart/components/PopUp.jsx","pages/activityPage/components/barChart/components/DayBars.jsx","pages/activityPage/components/barChart/BarChart.jsx","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/ArcPath.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/Arcs.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/DonutInnerText.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/LegendItem.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/Legend.js","pages/activityPage/components/doughnutChart/submoduleDoughnut/DonutChart.js","pages/activityPage/components/doughnutChart/DoughnutChart.jsx","pages/activityPage/components/topicsChart/TopicsChart.jsx","pages/activityPage/ActivityPage.jsx"],"names":["_classCallCheck","instance","Constructor","TypeError","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","LinearProgress","total","current","color","trailColor","percent","className","status","theme","style","CourseCard","title","level","totalCredits","currentCredits","src","advanced","alt","advanced1","advanced2","apprentice","expert","grandmaster","interested","master","noCredits","proficient","proficient1","pursuing","renderIcon","NumberCard","img","number","label","PercentageCard","CircularProgress","choiceGreen","COLORS","choiceRed","memo","lowerNumber","myData","mySiblingsData","myValue","value","mySiblingsValue","date","difference","Math","abs","parseInt","renderPercentage","toFixed","decreaseIcon","increaseIcon","DayBars","dayDetails","dayPrefix","lastWeek","thisWeek","position","height","data","user","useSelector","state","auth","useState","displayedData","setdisplayedData","DOTS","from","renderBarHeight","useCallback","minutes","parseFloat","dailyGoalHeight","favDailyGoal","useEffect","document","querySelectorAll","forEach","bar","backgroundColor","myArray","getDayPrefix","dayInfo","timeInSec","map","day","index","undefined","bottom","dot","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","_getPrototypeOf","getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","_typeof","obj","Symbol","iterator","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","result","Super","NewTarget","this","coordinates","half","radius","startAngle","endAngle","startAngleDegrees","PI","x1","cos","y1","sin","endAngleDegrees","x2","y2","arc","width","largeArcFlag","x","y","z","ArcPath","angle","fill","opacity","item","innerRadius","outerRadius","onClick","onMouseEnter","d","activeAngle","largeArcFlagOuter","largeArcFlagInner","outerCoords","innerCoords","outerArc","innerArc","path","Number","isNaN","cursor","Component","defaultProps","isEmpty","stroke","Arcs","selectedOffset","toggledOffset","emptyOffset","colors","emptyColor","strokeColor","colorFunction","selected","toggleSelect","arcPathClassName","empty","toggled","arcPath","classnames","DonutInnerText","formatValues","centerColor","valueClassName","textAnchor","fontSize","dy","LegendItem","totalWidth","legendRectClassName","legendLabelClassName","sqUnit","transform","cx","cy","r","Legend","legendItemClassName","DonutChart","newProps","JSON","stringify","setState","toggle","clickToggle","legend","arcsClassName","innerTextClassName","legendClassName","checkData","reduce","sum","currItem","graphWidth","legendWidth","viewBox","handleMouseEnter","bind","handleClick","DoughnutChart","categories","totalTimeInSec","setData","renderColor","sumOfFirstFive","slice","sec","timeSpentOnOthersInSeconds","timeSpentOnOthersInHms","secondsToHms","category","hms","TopicsChart","setDisplayedData","name","timeInHms","percentage","assignColor","percentOfOthers","others","display","choiceBlue","choicePurple","choiceLightBlue","choiceLightGreen","choiceLightPurple","choiceLightRed","choiceYellow","choiceLightYellow","ActivityPage","dispatch","useDispatch","useGetProdegreeInfo","userToken","createdClasses","class","proDegrees","setProDegrees","hoursWatched","setHoursWatched","secondsWatched","setSecondsWatched","classTimeCompleted","setClassTimeCompleted","classesCompleted","setClassesCompleted","classesCompletedPercent","setClassesCompletedPercent","doughnutChartDetails","setDoughnutChartDetails","barChartTimeWatched","setBarChartTimeWatched","topicsSectionData","setTopicsSectionData","topicsTotalTime","setTopicsTotalTime","b","a","difficultiesPercent","setDifficultiesPercent","difficultiesTime","setDifficultiesTime","calculateTimeWatched","todaysDate","moment","format","dayOfTheWeek","loopCount","getLoopCount","ALL_TIME","activeDate","clone","subtract","timeRangesForActiveDate","proDegree","video","dataTime","time","totalTimeSentInTheDay","range","split","dayOfTheWeekPrefix","structure","totalTime","initial","reversed","reverse","ultimate","valueToEdit","sortCategorizeIntoMostWatchedForDoughnutChart","uniqueCategories","getUniqueCategoriesAndTheirTotalTimeWatched","joinedCategories","sortedCategories","sort","calculateTopicsSpent","allTopicsSet","Set","eachProdegreeTopics","topicsInThisProdegree","timeSpentOnTopic","totalWatched","topics","topic","add","allTopicsArray","allTopicsAndAllTime","videoTopics","getTotalTimeOnTopics","values","topicsWithMoreDetails","entries","sorted","getDegreeColors","renderProdegrees","degreeType","obtainedCredits","availableCredits","degreeColors","calculateTotalHoursWatched","totalHoursWatched","getTotalVideoSecondsWatched","calculateClassTimeCompleted","totalSecondsOnAllProdegrees","videoDurationToSeconds","videoDuration","totalSecondsonAllProdegreesWatchedByUser","totalSecondsWatched","calculateClassesCompleted","allProDegreesCompletedClasses","filter","duration","allClassesViewedByUser","categorizeVideosIntoDifficulties","beginner","intermediate","difficulty","beginnerTotalTimeInSec","intermediateTotalTimeInSec","advancedTotalTimeInSec","totalTimeWatched","beginnerPercent","intermediatePercent","advancedPercent","axios","get","BASE_URL","headers","Authorization","then","res","updateCreatedClasses","catch","err","alert","id","Advert","classesAddedIcon","hoursWatchedIcon","classesCompletedIcon","gridTemplateColumns","gridGap"],"mappings":"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","file":"static/js/ActivityPage.36375920.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = __webpack_public_path__ + \"static/media/Advanced.4159f3a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/Advanced1.0f6d961f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Advanced2.6df08298.svg\";","module.exports = __webpack_public_path__ + \"static/media/Apprentice.cb69957d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Expert.a68b5742.svg\";","module.exports = __webpack_public_path__ + \"static/media/Grandmaster.914031f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/Interested.e6e1287e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Master.b55b2744.svg\";","module.exports = __webpack_public_path__ + \"static/media/NoCredits.7802ff1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/Proficient.10d76687.svg\";","module.exports = __webpack_public_path__ + \"static/media/Proficient1.ab6ebb15.svg\";","module.exports = __webpack_public_path__ + \"static/media/Pursuing.c0fe29ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/increase.a9a22290.svg\";","module.exports = __webpack_public_path__ + \"static/media/decrease.3a09b72f.svg\";","module.exports = __webpack_public_path__ + \"static/media/classesAddedIcon.3794f203.svg\";","module.exports = __webpack_public_path__ + \"static/media/classesCompletedIcon.90681aec.svg\";","module.exports = __webpack_public_path__ + \"static/media/hoursWatchedIcon.9ef2ba16.svg\";","import React from \"react\";\n\nimport { Progress } from \"react-sweet-progress\";\nimport \"react-sweet-progress/lib/style.css\";\n\nimport \"./ProgressBars.scss\";\nconst LinearProgress = ({ total, current, color, trailColor }) => {\n    const percent = (current / total) * 100;\n    return (\n        <div className=\"linear-progress-component\">\n            <Progress\n                percent={percent}\n                status=\"default\"\n                theme={{\n                    default: {\n                        color,\n                        trailColor\n                    }\n                }}\n            />\n            <div className=\"linear-progress-component__values\">\n                <h6 className=\"linear-progress-component__current-value\" style={{ color: color }}>\n                    {current} credits\n                </h6>\n                <h6 className=\"linear-progress-component__total-value\">{total} credits</h6>\n            </div>\n        </div>\n    );\n};\n\nexport default LinearProgress;\n","import React from \"react\";\n\nimport LinearProgress from \"@/components/specific/progressBars/LinearProgress\";\n\n// import logo from \"@/assets/global/logo-full.svg\";\n\nimport advanced from \"@/assets/global/allLogos/Advanced.svg\";\nimport advanced1 from \"@/assets/global/allLogos/Advanced1.svg\";\nimport advanced2 from \"@/assets/global/allLogos/Advanced2.svg\";\nimport apprentice from \"@/assets/global/allLogos/Apprentice.svg\";\nimport expert from \"@/assets/global/allLogos/Expert.svg\";\nimport grandmaster from \"@/assets/global/allLogos/Grandmaster.svg\";\nimport interested from \"@/assets/global/allLogos/Interested.svg\";\nimport master from \"@/assets/global/allLogos/Master.svg\";\nimport noCredits from \"@/assets/global/allLogos/NoCredits.svg\";\nimport proficient from \"@/assets/global/allLogos/Proficient.svg\";\nimport proficient1 from \"@/assets/global/allLogos/Proficient1.svg\";\nimport pursuing from \"@/assets/global/allLogos/Pursuing.svg\";\n\nimport \"../ActivityPage.scss\";\nconst CourseCard = ({ title, level, totalCredits, currentCredits, color, trailColor }) => {\n    const renderIcon = () => {\n        switch (level) {\n            case \"Advanced\":\n                return <img src={advanced} alt=\"\" />;\n            case \"Advanced 1\":\n                return <img src={advanced1} alt=\"\" />;\n            case \"Advanced 2\":\n                return <img src={advanced2} alt=\"\" />;\n            case \"Apprentice\":\n                return <img src={apprentice} alt=\"\" />;\n            case \"Expert\":\n                return <img src={expert} alt=\"\" />;\n            case \"Grand Master\":\n                return <img src={grandmaster} alt=\"\" />;\n            case \"Interested\":\n                return <img src={interested} alt=\"\" />;\n            case \"Master\":\n                return <img src={master} alt=\"\" />;\n            case \"No Credits\":\n                return <img src={noCredits} alt=\"\" />;\n            case \"Proficient\":\n                return <img src={proficient} alt=\"\" />;\n            case \"Proficient 1\":\n                return <img src={proficient1} alt=\"\" />;\n            case \"Pursuing\":\n                return <img src={pursuing} alt=\"\" />;\n            default:\n                return null;\n        }\n    };\n    return (\n        <div className=\"course-card-component\">\n            <div className=\"course-card-component__title\">\n                <h3 style={{ color }}>{title}</h3>\n                <div className=\"course-card-component__title__img-wrapper\">{renderIcon()}</div>\n            </div>\n            {level !== \"No Credits\" && <h1 className=\"course-card-component__level\">{level}</h1>}\n            <div>\n                <LinearProgress total={totalCredits} current={currentCredits} color={color} trailColor={trailColor} />\n            </div>\n        </div>\n    );\n};\n\nexport default CourseCard;\n","import React from \"react\";\n\nimport \"../ActivityPage.scss\";\n\nconst NumberCard = ({ img, number, label, color }) => {\n    return (\n        <div className=\"number-card-component\">\n            <div className=\"number-card-component__icon-wrapper\">\n                <img src={img} alt=\"\" />\n            </div>\n            <div className=\"number-card-component__info\">\n                <h1 style={{ color: `${color}` }}>{number}</h1>\n                <h2>{label}</h2>\n            </div>\n        </div>\n    );\n};\n\nexport default NumberCard;\n","import React from \"react\";\n\nimport CircularProgress from \"@/components/specific/progressBars/CircularProgress\";\nimport \"../ActivityPage.scss\";\n\nconst PercentageCard = ({ percent, label, color, trailColor }) => {\n    return (\n        <div className=\"percentage-card-component\">\n            <div className=\"percentage-card-component__info\">\n                <h1>{label}</h1>\n            </div>\n            <div className=\"percentage-card-component__percent-wrapper\">\n                <CircularProgress percent={percent} color={color} trailColor={trailColor}>\n                    <span className=\"number\">\n                        {percent}\n                        <sup>%</sup>\n                    </span>\n                </CircularProgress>\n            </div>\n        </div>\n    );\n};\n\nexport default PercentageCard;\n","import React, { memo } from \"react\";\n\nimport increaseIcon from \"@/assets/pages/activityPage/increase.svg\";\nimport decreaseIcon from \"@/assets/pages/activityPage/decrease.svg\";\n\nimport \"./PopUp.scss\";\n\nimport { COLORS } from \"@/utils/Constants\";\n\nconst { choiceGreen, choiceRed } = COLORS;\n\nconst PopUp = ({ myData, mySiblingsData }) => {\n    const { value: myValue, date: myDate } = myData;\n    const { value: mySiblingsValue, date: mySiblingsDate } = mySiblingsData;\n    let lowerNumber;\n\n    //Find percentage equivalent of each valut\n    const difference = Math.abs(myValue - mySiblingsValue);\n\n    if (parseInt(myValue) < parseInt(mySiblingsValue)) {\n        lowerNumber = myValue;\n    } else if (parseInt(myValue) > parseInt(mySiblingsValue)) {\n        lowerNumber = mySiblingsValue;\n    } else {\n        lowerNumber = myValue;\n    }\n\n    const renderPercentage = () => {\n        //Any number divided by zero would result in an invalid calculation here\n        if (lowerNumber === 0) return 0;\n        return ((difference / lowerNumber) * 100).toFixed(1);\n    };\n\n    // console.log(myDate, mySiblingsDate);\n\n    return (\n        <div className=\"popup\">\n            <h6 className=\"popup__top\">Aug 30 vs Aug 24</h6>\n            <div className=\"popup__bottom\">\n                <h4>{myValue}m</h4>\n                {lowerNumber === myValue ? (\n                    <>\n                        <img src={decreaseIcon} alt=\"\" />\n                        <h5 style={{ color: choiceRed }}>{renderPercentage()}%</h5>\n                    </>\n                ) : (\n                    <>\n                        <img src={increaseIcon} alt=\"\" />\n                        <h5 style={{ color: choiceGreen }}>{renderPercentage()}%</h5>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(PopUp);\n","import React from \"react\";\n\nimport PopUp from \"./PopUp\";\n\nimport \"../BarChart.scss\";\nconst DayBars = ({ dayDetails }) => {\n    const { dayPrefix, lastWeek, thisWeek } = dayDetails;\n    return (\n        <div className=\"bar-chart-component__section\">\n            <div className=\"day\">{dayPrefix}</div>\n            <div className=\"bar-wrapper\">\n                <div style={{ position: \"relative\" }}>\n                    <div className=\"bar last-week\" style={{ height: `${lastWeek.height}px` }}></div>\n                    <PopUp myData={lastWeek} mySiblingsData={thisWeek} />\n                </div>\n                <div style={{ position: \"relative\" }}>\n                    <div className=\"bar this-week\" style={{ height: `${thisWeek.height}px` }}></div>\n                    <PopUp myData={thisWeek} mySiblingsData={lastWeek} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DayBars;\n","import React, { memo, useEffect, useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nimport { getDayPrefix } from \"@/utils/Utils\";\n\nimport \"./BarChart.scss\";\n\nimport DayBars from \"./components/DayBars\";\n\nconst Barchart = ({ data }) => {\n    //------------------------------------------------------------------------------\n    //Store\n    //------------------------------------------------------------------------------\n    const { user } = useSelector((state) => state.auth);\n\n    //------------------------------------------------------------------------------\n    //State\n    //------------------------------------------------------------------------------\n    const [displayedData, setdisplayedData] = useState(data);\n\n    //------------------------------------------------------------------------------\n    //Variables\n    //------------------------------------------------------------------------------\n    const DOTS = Array.from({ length: 40 });\n\n    //------------------------------------------------------------------------------\n    //Helper functions\n    //------------------------------------------------------------------------------\n    /*\n    Bar maximum height is 265px\n    Total height = 300px;\n    day height = 20px;\n    space between day and start of bar = 15px\n    therefore available bar height = 300px - 20px -15px = 265px\n\n    1440m = 265px\n    x m = y px\n\n    */\n    //Take in minutes, spits out pixels\n    const renderBarHeight = useCallback((minutes) => {\n        return parseFloat((minutes / 1440) * 265).toFixed(4);\n    }, []);\n\n    //user set daily goal height on bar chart\n    const dailyGoalHeight = renderBarHeight(user.favDailyGoal);\n\n    //------------------------------------------------------------------------------\n    // Use Effects\n    //------------------------------------------------------------------------------\n    useEffect(() => {\n        //Get all the bars\n        const bars = document.querySelectorAll(\".bar-wrapper .bar\");\n\n        //For each bar, if its height is greater than or equal to the daily goal change its background color to green\n        bars.forEach((bar) => {\n            if (parseFloat(bar.style.height) >= dailyGoalHeight) {\n                //if so change its background color\n                bar.style.backgroundColor = \"#29C677\";\n            }\n        });\n    }, [dailyGoalHeight, user.favDailyGoal]);\n\n    useEffect(() => {\n        // console.log(data);\n        if (data && data.length !== 0) {\n            const myArray = [];\n            for (let i = 0; i < data.length; i++) {\n                let dayPrefix;\n                if (i === 6) {\n                    dayPrefix = \"S\";\n                } else {\n                    dayPrefix = getDayPrefix(i + 1);\n                }\n                const dayInfo = {\n                    lastWeek: {\n                        value: parseInt(data[i][0].timeInSec / 60),\n                        height: renderBarHeight(data[i][0].timeInSec / 60), //because chart displays time in minutes\n                        date: data[i][0].date\n                    },\n                    thisWeek: {\n                        value: data[i][1] ? parseInt(data[i][1].timeInSec / 60) : 0,\n                        height: data[i][1] ? renderBarHeight(data[i][1].timeInSec / 60) : 0, //because chart displays time in minutes\n                        date: data[i][1] ? data[i][1].date : 0\n                    },\n                    dayPrefix: dayPrefix\n                };\n                myArray.push(dayInfo);\n            }\n            setdisplayedData(myArray);\n        }\n    }, [data]);\n\n    // console.log(displayedData);\n\n    return (\n        <div className=\"bar-chart-component\">\n            {displayedData.length !== 0 &&\n                displayedData.map((day, index) => {\n                    return <DayBars key={index} dayDetails={day} />;\n                })}\n\n            {user.favDailyGoal === undefined || user.favDailyGoal === 0 ? null : (\n                <div\n                    className=\"bar-chart-component__dailygoal-marker\"\n                    style={{ bottom: `calc(${dailyGoalHeight}px + 35px)` }}\n                >\n                    <div className=\"text\">\n                        <h6>Goal</h6>\n                        <h6>{user.favDailyGoal}m</h6>\n                    </div>\n                    <div className=\"dots\">\n                        {DOTS.map((dot, i) => {\n                            return <span className=\"dots__dot\" key={i}></span>;\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default memo(Barchart);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","/**\n * @fileOverview ArcPath component.\n * Rendered chart section dictated by each item.\n * @name ArcPath.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Calculate coordinates of given arc.\n * @param {number} half - Half the total width of the chart.\n * @param {number} radius - Radius of the arc.\n * @param {number} startAngle - Starting angle for the arc.\n * @param {number} endAngle - Ending angle for the arc.\n */\nfunction coordinates(half, radius, startAngle, endAngle) {\n    const startAngleDegrees = (Math.PI * startAngle) / 180;\n    const x1 = half + half * radius * Math.cos(startAngleDegrees);\n    const y1 = half + half * radius * Math.sin(startAngleDegrees);\n    const endAngleDegrees = (Math.PI * endAngle) / 180;\n    const x2 = half + half * radius * Math.cos(endAngleDegrees);\n    const y2 = half + half * radius * Math.sin(endAngleDegrees);\n\n    return {\n        x1,\n        y1,\n        x2,\n        y2\n    };\n}\n\n/**\n * Creates an SVG arc object for an SVG path object.\n * @param {number} width - Total width of the chart.\n * @param {number} radius - Radius of the arc.\n * @param {string} largeArcFlag - Flag for angles over 180 degrees.\n * @param {number} x - X coordinate for arc.\n * @param {number} y - Y coordinate for arc.\n */\nfunction arc(width, radius, largeArcFlag, x, y) {\n    const z = (width / 2) * radius;\n\n    return `A${z}, ${z} 0 ${largeArcFlag} ${x}, ${y}`;\n}\n\n/**\n * Creates the SVG path object for an item.\n * @param {number} value - Value of incoming item.\n * @param {number} total - Culmulative value of all items\n * @param {number} startAngle - Degree at which the angle calculation should begin.\n * @param {number} width - Total width of the chart.\n * @param {number} innerRadius - Inner circle's radius.\n * @param {number} outerRadius - Outer circle's radius.\n */\nfunction path(activeAngle, startAngle, width, innerRadius, outerRadius) {\n    const endAngle = startAngle + activeAngle;\n\n    const largeArcFlagOuter = activeAngle > 180 ? \"1 1\" : \"0 1\";\n    const largeArcFlagInner = activeAngle > 180 ? \"1 0\" : \"0 0\";\n    const half = width / 2;\n    const outerCoords = coordinates(half, outerRadius, startAngle, endAngle);\n    const innerCoords = coordinates(half, innerRadius, startAngle, endAngle);\n\n    const outerArc = arc(width, outerRadius, largeArcFlagOuter, outerCoords.x2, outerCoords.y2);\n    const innerArc = arc(width, innerRadius, largeArcFlagInner, innerCoords.x1, innerCoords.y1);\n\n    return `M${outerCoords.x1},${outerCoords.y1}\n    ${outerArc}\n    L${innerCoords.x2},${innerCoords.y2}\n    ${innerArc} z`;\n}\n\n/**\n * @extends {Component}\n */\nexport default class ArcPath extends Component {\n    /* React render function */\n    render() {\n        const {\n            width,\n            angle,\n            total,\n            fill,\n            // stroke,\n            opacity,\n            item,\n            className,\n            innerRadius,\n            outerRadius,\n            onClick,\n            onMouseEnter\n        } = this.props;\n        const { value } = item;\n        const activeAngle = Number.isNaN(value / total) || total / value === 1 ? 359.99 : (value / total) * 360;\n        const d = path(activeAngle, angle, width, innerRadius, outerRadius);\n        // console.log(innerRadius, \"INNER RADIUS\");\n        // console.log(outerRadius, \"OUTER RADIUS\");\n        return (\n            <path\n                onClick={() => onClick(item)}\n                onMouseEnter={() => onMouseEnter(item, fill)}\n                className={className}\n                d={d}\n                // stroke={stroke}\n                fill={fill}\n                opacity={opacity}\n                cursor=\"pointer\"\n            ></path>\n        );\n    }\n}\n\nArcPath.propTypes = {\n    item: PropTypes.shape({\n        value: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        className: PropTypes.string,\n        isEmpty: PropTypes.bool\n    }).isRequired,\n    total: PropTypes.number.isRequired,\n    angle: PropTypes.number.isRequired,\n    width: PropTypes.number,\n    innerRadius: PropTypes.number.isRequired,\n    outerRadius: PropTypes.number.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    fill: PropTypes.string,\n    stroke: PropTypes.string,\n    opacity: PropTypes.number,\n    className: PropTypes.string\n};\n\nArcPath.defaultProps = {\n    item: {\n        label: \"\",\n        value: 100,\n        isEmpty: true\n    },\n    total: 100,\n    angle: 0,\n    width: 500,\n    innerRadius: 0.7,\n    outerRadius: 0.9,\n    onMouseEnter: (item) => item,\n    onClick: (item) => item,\n    fill: \"#e0e0e0\",\n    stroke: \"#e0e0e0\",\n    opacity: 1,\n    className: \"donutchart-arcs-path\"\n};\n","/**\n * @fileOverview Aggregation of ArcPath components.\n * Orchestrates the rendering of the chart sections,\n * based on each item's value.\n * @name Arcs.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport ArcPath from \"./ArcPath\";\n\n/**\n * @extends {Component}\n */\nexport default class Arcs extends Component {\n    /* React render function */\n    render() {\n        const {\n            startAngle,\n            className,\n            data,\n            selectedOffset,\n            toggledOffset,\n            emptyOffset,\n            colors,\n            emptyColor,\n            strokeColor,\n            colorFunction,\n            onMouseEnter,\n            onClick,\n            total,\n            width,\n            selected,\n            toggleSelect\n        } = this.props;\n        const arcPathClassName = `${className}-path`;\n        let angle = startAngle;\n\n        return (\n            <g className={className}>\n                {data.map((item, index) => {\n                    const classes = {};\n                    const { value, isEmpty, className } = item;\n\n                    let { innerRadius, outerRadius } = this.props;\n                    let stroke = strokeColor;\n                    let opacity = 1;\n\n                    if (isEmpty) {\n                        classes.empty = true;\n                        innerRadius += emptyOffset;\n                        outerRadius -= emptyOffset;\n                        stroke = emptyColor;\n                    } else if (selected.label === item.label) {\n                        if (toggleSelect) {\n                            classes.toggled = true;\n                            innerRadius -= toggledOffset;\n                            outerRadius += toggledOffset;\n                            opacity = 1;\n                        } else {\n                            classes.selected = true;\n                            outerRadius += selectedOffset;\n                            innerRadius -= selectedOffset;\n                            opacity = 1;\n                        }\n                    }\n\n                    if (className) {\n                        classes[className] = true;\n                    }\n                    classes[arcPathClassName] = true;\n\n                    const fill = isEmpty ? emptyColor : colorFunction(colors, index);\n\n                    const arcPath = (\n                        <ArcPath\n                            width={width}\n                            item={item}\n                            key={`arcpath${index}`}\n                            innerRadius={innerRadius}\n                            outerRadius={outerRadius}\n                            className={classnames(classes)}\n                            opacity={opacity}\n                            fill={fill}\n                            stroke={stroke}\n                            angle={angle}\n                            total={total}\n                            onMouseEnter={onMouseEnter}\n                            onClick={onClick}\n                        />\n                    );\n\n                    angle += (value / total) * 360;\n\n                    return arcPath;\n                })}\n            </g>\n        );\n    }\n}\n\nArcs.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            value: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired,\n            className: PropTypes.string,\n            isEmpty: PropTypes.bool\n        })\n    ).isRequired,\n    selected: PropTypes.shape({\n        value: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        className: PropTypes.string,\n        isEmpty: PropTypes.bool\n    }).isRequired,\n    toggleSelect: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    innerRadius: PropTypes.number.isRequired,\n    outerRadius: PropTypes.number.isRequired,\n    selectedOffset: PropTypes.number.isRequired,\n    emptyOffset: PropTypes.number.isRequired,\n    toggledOffset: PropTypes.number.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.arrayOf(PropTypes.string),\n    emptyColor: PropTypes.string,\n    stokeColor: PropTypes.string,\n    startAngle: PropTypes.number,\n    colorFunction: PropTypes.func\n};\n\nArcs.defaultProps = {\n    data: [\n        {\n            label: \"\",\n            value: 100,\n            isEmpty: true\n        }\n    ],\n    selected: {\n        value: 100,\n        label: \"\",\n        isEmpty: true\n    },\n    toggleSelect: false,\n    total: 100,\n    className: \"donutchart-arcs\",\n    width: 500,\n    colors: [\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\",\n        \"#673ab7\",\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#03a9f4\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#8bc34a\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#795548\",\n        \"#607d8b\"\n    ],\n    emptyColor: \"#e0e0e0\",\n    strokeColor: \"#212121\",\n    startAngle: 0,\n    colorFunction: (colors, index) => colors[index % colors.length],\n    innerRadius: 0.7,\n    outerRadius: 0.9,\n    selectedOffset: 0.03,\n    emptyOffset: 0.08,\n    toggledOffset: 0.04,\n    onMouseEnter: (item) => item,\n    onClick: (item) => item\n};\n","/**\n * @fileOverview The text component in the Donut Chart inner circle.\n * Shows the selected item's label and value\n * @name DonutInnerText.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @extends {Component}\n */\nexport default class DonutInnerText extends Component {\n    /* React render function */\n    render() {\n        const { item, className, width, formatValues, total, centerColor } = this.props;\n        // const { label } = item;\n        const { value } = item;\n        const half = width / 2 + 10; //The extra 10 is to center it due to the addition of \"%\" that makes it not centered\n        // const labelClassName = `${className}-label`;\n        const valueClassName = `${className}-value`;\n\n        return (\n            <g className={className}>\n                <text className={valueClassName} x={half} y=\"54%\" textAnchor=\"middle\" fontSize=\"42\" fill={centerColor}>\n                    {formatValues(value, total)}\n                    <tspan dy=\"-20\" fontSize=\"23\">\n                        %\n                    </tspan>\n                </text>\n            </g>\n        );\n    }\n}\n\nDonutInnerText.propTypes = {\n    item: PropTypes.shape({\n        value: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        className: PropTypes.string,\n        isEmpty: PropTypes.bool\n    }).isRequired,\n    className: PropTypes.string,\n    total: PropTypes.number,\n    width: PropTypes.number,\n    formatValues: PropTypes.func,\n    centerColor: PropTypes.string\n};\n\nDonutInnerText.defaultProps = {\n    item: {\n        label: \"\",\n        value: 100,\n        isEmpty: true\n    },\n    total: 100,\n    className: \"donutchart-innertext\",\n    width: 500,\n    formatValues: (value) => value,\n    centerColor: \"rgba(180, 180, 201, 0.01)\"\n};\n","/**\n * @fileOverview LegendItem component.\n * Rendered SVG box, label, and value for each item.\n * @name LegendItem.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * @extends {Component}\n */\nexport default class LegendItem extends Component {\n    /* React render function */\n    render() {\n        const {\n            className,\n            item,\n            index,\n            onClick,\n            onMouseEnter,\n            fill,\n            opacity,\n            width,\n            totalWidth\n            // stroke\n        } = this.props;\n        const { label, value } = item;\n\n        const legendRectClassName = `${className}-rect`;\n        const legendLabelClassName = `${className}-label`;\n        const sqUnit = width / 10;\n        const yOffset = 1.5;\n\n        const position = `translate(${totalWidth - width},\n${index * yOffset * sqUnit})`;\n        return (\n            <g\n                transform={position}\n                className={className}\n                onClick={() => {\n                    onClick(item);\n                }}\n                onMouseEnter={() => {\n                    onMouseEnter(item);\n                }}\n            >\n                <circle\n                    cx={sqUnit / 2}\n                    cy={sqUnit / 2}\n                    r=\"5\"\n                    className={legendRectClassName}\n                    fill={fill}\n                    opacity={opacity}\n                ></circle>\n                {/* <rect\n                    className={legendRectClassName}\n                    width={sqUnit}\n                    height={sqUnit}\n                    fill={fill}\n                    opacity={opacity}\n                    // stroke={stroke}\n                ></rect> */}\n                <text className={legendLabelClassName} x={sqUnit + sqUnit / 2} y={sqUnit / 2} dy=\".35em\">\n                    {`${label} - ${value}`}\n                </text>\n            </g>\n        );\n    }\n}\n\nLegendItem.propTypes = {\n    item: PropTypes.shape({\n        value: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        className: PropTypes.string,\n        isEmpty: PropTypes.bool\n    }).isRequired,\n    width: PropTypes.number.isRequired,\n    totalWidth: PropTypes.number.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    index: PropTypes.number,\n    opacity: PropTypes.number,\n    stroke: PropTypes.string,\n    fill: PropTypes.string,\n    className: PropTypes.string\n};\n\nLegendItem.defaultProps = {\n    item: {\n        label: \"\",\n        value: 100,\n        isEmpty: true\n    },\n    index: 0,\n    opacity: 1,\n    fill: \"#e0e0e0\",\n    stroke: \"#e0e0e0\",\n    className: \"donutchart-legend-item\",\n    width: 250,\n    totalWidth: 750,\n    onMouseEnter: (item) => item,\n    onClick: (item) => item\n};\n","/**\n * @fileOverview Legend component.\n * Orchestrates all rendering each LegendItem component,\n * based on each item.\n * @name Legend.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport LegendItem from \"./LegendItem\";\n\n/**\n * @extends {Component}\n */\nexport default class Legend extends Component {\n    /* React render function */\n    render() {\n        const {\n            className,\n            data,\n            strokeColor,\n            emptyColor,\n            colorFunction,\n            colors,\n            width,\n            totalWidth,\n            onClick,\n            onMouseEnter,\n            toggleSelect,\n            selected\n        } = this.props;\n\n        const legendItemClassName = `${className}-item`;\n        return (\n            <g className={className}>\n                {data.map((item, index) => {\n                    const classes = {};\n                    const { isEmpty, className } = item;\n                    let stroke = strokeColor;\n                    let opacity = 1;\n\n                    if (isEmpty) {\n                        classes.empty = true;\n                        stroke = emptyColor;\n                    } else if (selected.label === item.label) {\n                        if (toggleSelect) {\n                            classes.toggled = true;\n                            opacity = 1;\n                        } else {\n                            classes.selected = true;\n                            opacity = 0.5;\n                        }\n                    }\n\n                    if (className) {\n                        classes[className] = true;\n                    }\n\n                    classes[legendItemClassName] = true;\n\n                    const fill = isEmpty ? emptyColor : colorFunction(colors, index);\n\n                    return (\n                        <LegendItem\n                            key={`legenditem${index}`}\n                            index={index}\n                            item={item}\n                            className={classnames(classes)}\n                            width={width}\n                            totalWidth={totalWidth}\n                            opacity={opacity}\n                            fill={fill}\n                            stroke={stroke}\n                            onClick={onClick}\n                            onMouseEnter={onMouseEnter}\n                        />\n                    );\n                })}\n            </g>\n        );\n    }\n}\n\nLegend.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            value: PropTypes.number.isrequired,\n            label: PropTypes.string.isrequired,\n            className: PropTypes.string,\n            isEmpty: PropTypes.boolean\n        })\n    ).isRequired,\n    selected: PropTypes.shape({\n        value: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        className: PropTypes.string,\n        isEmpty: PropTypes.bool\n    }).isRequired,\n    toggleSelect: PropTypes.bool.isRequired,\n    colorFunction: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    width: PropTypes.number.isRequired,\n    totalWidth: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    colors: PropTypes.arrayOf(PropTypes.string),\n    emptyColor: PropTypes.string,\n    strokeColor: PropTypes.string\n};\n\nLegend.defaultProps = {\n    data: [\n        {\n            label: \"\",\n            value: 100,\n            isEmpty: true\n        }\n    ],\n    selected: {\n        value: 100,\n        label: \"\",\n        isEmpty: true\n    },\n    toggleSelect: false,\n    className: \"donutchart-legend\",\n    width: 250,\n    totalWidth: 750,\n    colors: [\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\",\n        \"#673ab7\",\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#03a9f4\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#8bc34a\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#795548\",\n        \"#607d8b\"\n    ],\n    emptyColor: \"#e0e0e0\",\n    strokeColor: \"#212121\",\n    colorFunction: (colors, index) => colors[index % colors.length],\n    onMouseEnter: (item) => item,\n    onClick: (item) => item\n};\n","/**\n * @fileOverview Main Donut Chart entry point.\n * Orchestrates all rendering for the chart, passing props to\n * Arcs, DonutInnerText, and Legend children components.\n * @name DonutChart.js\n * @author JJ Naughton\n * @license MIT\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Arcs from \"./Arcs\";\nimport DonutInnerText from \"./DonutInnerText\";\nimport Legend from \"./Legend\";\n\n/**\n * Calculates the total of all the items' value,\n * using a reduce function over the items.\n * @param {} items - An array of items, each with values, at least.\n */\nfunction calculateTotal(items) {\n    return items.reduce((sum, currItem) => sum + currItem.value, 0);\n}\n\n/**\n * @extends {Component}\n */\nexport default class DonutChart extends Component {\n    /**\n     * Represents a DonutChart.\n     * @constructor\n     * @param {} props - Object of propTypes with defaultProps as fallback.\n     */\n    constructor(props) {\n        super(props);\n\n        // const { data } = props;\n\n        this.state = {\n            // selected: data[0],\n            selected: [\n                {\n                    label: \"\",\n                    value: 100,\n                    isEmpty: true\n                }\n            ],\n            toggleSelect: false,\n            centerColor: \"rgba(180, 180, 201, 0.01)\"\n        };\n    }\n\n    componentWillReceiveProps(newProps) {\n        const { data } = newProps;\n\n        // if new data, reset\n        if (data && JSON.stringify(data) !== JSON.stringify(this.props.data)) {\n            this.setState({\n                selected: data[0],\n                toggleSelect: false\n            });\n        }\n    }\n\n    /**\n     * Handles the clicking of an ArcPath region.\n     * Toggles the selected state,\n     * effectively freezing all handlers on other, unselected items.\n     * Calls the onClick handler,\n     * passed by the user as a prop,\n     * providing the item clicked,\n     * as well as whether it's becoming selected or unselected.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n    handleClick(item) {\n        if (this.state.selected.label === item.label) {\n            const toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\n            this.setState({\n                toggleSelect: toggle,\n                selected: item\n            });\n            this.props.onClick(item, toggle);\n        }\n    }\n\n    /**\n     * Handles the mouseenter event over an ArcPath region.\n     * Sets the clicked item as selected in the state object.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n    handleMouseEnter(item, fill) {\n        if (!this.state.toggleSelect) {\n            this.setState({\n                selected: item,\n                centerColor: fill\n            });\n            this.props.onMouseEnter(item);\n        }\n    }\n\n    /* React render function */\n    render() {\n        const {\n            startAngle,\n            width,\n            height,\n            formatValues,\n            className,\n            data,\n            legend,\n            emptyColor,\n            strokeColor,\n            colors,\n            colorFunction,\n            innerRadius,\n            outerRadius,\n            emptyOffset,\n            selectedOffset,\n            toggledOffset\n        } = this.props;\n\n        const arcsClassName = `${className}-arcs`;\n        const innerTextClassName = `${className}-innertext`;\n        const legendClassName = `${className}-legend`;\n\n        const checkData = data.length\n            ? data\n            : [\n                  {\n                      label: \"\",\n                      value: 100,\n                      isEmpty: true\n                  }\n              ];\n\n        const total = calculateTotal(checkData);\n        const twoThirds = 2 / 3;\n        const graphWidth = legend ? width * twoThirds : width;\n        const legendWidth = width - graphWidth;\n\n        return (\n            <svg className={className} width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                <Arcs\n                    className={arcsClassName}\n                    colors={colors}\n                    data={checkData}\n                    width={graphWidth}\n                    emptyColor={emptyColor}\n                    strokeColor={strokeColor}\n                    colorFunction={colorFunction}\n                    onMouseEnter={this.handleMouseEnter.bind(this)}\n                    onClick={this.handleClick.bind(this)}\n                    selected={this.state.selected}\n                    startAngle={startAngle}\n                    toggleSelect={this.state.toggleSelect}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                    selectedOffset={selectedOffset}\n                    toggledOffset={toggledOffset}\n                    emptyOffset={emptyOffset}\n                    total={total}\n                />\n                <DonutInnerText\n                    item={this.state.selected}\n                    width={graphWidth}\n                    formatValues={formatValues}\n                    total={total}\n                    className={innerTextClassName}\n                    centerColor={this.state.centerColor}\n                />\n                {legend ? (\n                    <Legend\n                        data={checkData}\n                        totalWidth={width}\n                        width={legendWidth}\n                        colors={colors}\n                        emptyColor={emptyColor}\n                        strokeColor={strokeColor}\n                        colorFunction={colorFunction}\n                        onMouseEnter={this.handleMouseEnter.bind(this)}\n                        onClick={this.handleClick.bind(this)}\n                        selected={this.state.selected}\n                        toggleSelect={this.state.toggleSelect}\n                        className={legendClassName}\n                    />\n                ) : null}\n            </svg>\n        );\n    }\n}\n\nDonutChart.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            value: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired,\n            className: PropTypes.string,\n            isEmpty: PropTypes.boolean\n        })\n    ).isRequired,\n    className: PropTypes.string,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    colors: PropTypes.arrayOf(PropTypes.string),\n    emptyColor: PropTypes.string,\n    stokeColor: PropTypes.string,\n    startAngle: PropTypes.number,\n    colorFunction: PropTypes.func,\n    innerRadius: PropTypes.number,\n    outerRadius: PropTypes.number,\n    selectedOffset: PropTypes.number,\n    emptyOffset: PropTypes.number,\n    toggledOffset: PropTypes.number,\n    formatValues: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onClick: PropTypes.func,\n    legend: PropTypes.bool,\n    clickToggle: PropTypes.bool\n};\n\nDonutChart.defaultProps = {\n    data: [\n        {\n            label: \"\",\n            value: 100,\n            isEmpty: true\n        }\n    ],\n    className: \"donutchart\",\n    height: 500,\n    width: 750,\n    colors: [\"#4389F8\", \"#F7CF34\", \"#29C677\", \"#E63146\", \"#6A28E6\", \"#B4B4C9\"],\n    emptyColor: \"#e0e0e0\",\n    strokeColor: \"#212121\",\n    startAngle: 0,\n    colorFunction: (colors, index) => colors[index % colors.length],\n    innerRadius: 0.7,\n    outerRadius: 0.85,\n    selectedOffset: 0.05,\n    emptyOffset: 0.08,\n    toggledOffset: 0.04,\n    formatValues: (value, total) => {\n        return Number.isNaN(value / total) ? \"--\" : `${parseInt((value / total) * 100)}`;\n    },\n    onMouseEnter: (item) => item,\n    onClick: (item, toggled) => (toggled ? item : null),\n    legend: true,\n    clickToggle: true\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport Doughnut from \"./submoduleDoughnut/DonutChart\";\n\nimport { secondsToHms } from \"@/utils/Utils\";\nimport \"./DoughnutChart.scss\";\nconst DoughnutChart = ({ categories, totalTimeInSec }) => {\n    const [data, setData] = useState();\n    const renderColor = (index) => {\n        switch (index) {\n            case 0:\n                return \"#4389F8\";\n            case 1:\n                return \"#F7CF34\";\n            case 2:\n                return \"#29C677\";\n            case 3:\n                return \"#E63146\";\n            case 4:\n                return \"#6A28E6\";\n        }\n    };\n\n    const sumOfFirstFive = categories?.slice(0, 5).reduce((total, item) => {\n        return total + item.sec;\n    }, 0);\n\n    const timeSpentOnOthersInSeconds = totalTimeInSec - sumOfFirstFive;\n    const timeSpentOnOthersInHms = secondsToHms(timeSpentOnOthersInSeconds);\n\n    const renderOthers = () => {\n        //Find others percentage\n        return (\n            <div className=\"custom-legend__item\">\n                <div className=\"circle\" style={{ backgroundColor: \"#B4B4C9\" }}></div>\n                <div className=\"text\">\n                    <h3>Other</h3>\n                    <h5>\n                        {parseInt((timeSpentOnOthersInSeconds / totalTimeInSec) * 100)}% | {timeSpentOnOthersInHms}\n                    </h5>\n                </div>\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        if (categories && categories.length !== 0) {\n            setData([\n                {\n                    label: categories[0].title,\n                    value: categories[0].sec\n                },\n                {\n                    label: categories[1].title,\n                    value: categories[1].sec\n                },\n                {\n                    label: categories[2].title,\n                    value: categories[2].sec\n                },\n                {\n                    label: categories[3].title,\n                    value: categories[3].sec\n                },\n                {\n                    label: categories[4].title,\n                    value: categories[4].sec\n                },\n\n                {\n                    label: \"Other\",\n                    value: timeSpentOnOthersInSeconds\n                }\n            ]);\n        }\n    }, [categories]);\n    return (\n        <div className=\"doughnut-chart-component\">\n            {data && <Doughnut data={data} width={300} height={300} legend={false} />}\n            {categories && (\n                <div className=\"custom-legend\">\n                    {categories.slice(0, 5).map((category, index) => {\n                        const { title, hms, sec } = category;\n                        return (\n                            <div className=\"custom-legend__item\" key={index}>\n                                <div className=\"circle\" style={{ backgroundColor: renderColor(index) }}></div>\n                                <div className=\"text\">\n                                    <h3>{title}</h3>\n                                    <h5>\n                                        {parseInt((sec / totalTimeInSec) * 100)}% | {hms}\n                                    </h5>\n                                </div>\n                            </div>\n                        );\n                    })}\n\n                    {categories.length > 5 && renderOthers()}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DoughnutChart;\n","import React, { useState } from \"react\";\n\nimport \"../../ActivityPage.scss\";\nimport { useEffect } from \"react\";\nimport { secondsToHms, assignColor } from \"@/utils/Utils\";\n\nconst TopicsChart = ({ data, totalTimeInSec }) => {\n    const [displayedData, setDisplayedData] = useState([]);\n\n    useEffect(() => {\n        if (data && data.length !== 0) {\n            const myArray = [];\n\n            //Get top five topics\n            for (let i = 0; i < 5; i++) {\n                const item = {\n                    name: data[i].title,\n                    timeInHms: data[i].timeInHms,\n                    percent: data[i].percentage,\n                    color: assignColor(i)\n                };\n\n                myArray.push(item);\n            }\n\n            //calculate for others\n            const sumOfFirstFive = data?.slice(0, 5).reduce((total, item) => {\n                return total + item.timeInSec;\n            }, 0);\n\n            const timeInSec = totalTimeInSec - sumOfFirstFive;\n            const percentOfOthers = ((timeInSec / totalTimeInSec) * 100).toFixed(0);\n\n            const others = {\n                name: \"Others\",\n                timeInHms: secondsToHms(timeInSec),\n                percent: percentOfOthers,\n                color: assignColor(5)\n            };\n\n            myArray.push(others);\n            setDisplayedData(myArray);\n        }\n    }, [data]);\n    return (\n        <div className=\"section topics-card\">\n            <h1 className=\"topics-card__title\">Topics</h1>\n            {displayedData && displayedData.length !== 0 && (\n                <>\n                    <div className=\"topics-card__color-bar\">\n                        {displayedData.map((item, i) => {\n                            const { color, percent } = item;\n                            return (\n                                <span\n                                    key={i}\n                                    style={{ display: \"inline-block\", backgroundColor: color, width: `${percent}%` }}\n                                ></span>\n                            );\n                        })}\n                    </div>\n                    <div className=\"topics-card__courses\">\n                        {displayedData.map((item, i) => {\n                            const { name, percent, timeInHms, color } = item;\n                            return (\n                                <div key={i} className=\"topics-card__courses__course\">\n                                    <div className=\"color-code\" style={{ backgroundColor: `${color}` }}></div>\n                                    <div>\n                                        <h3>{name}</h3>\n                                        <h5>\n                                            {percent}% | {timeInHms}\n                                        </h5>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default TopicsChart;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nimport CourseCard from \"./components/CourseCard\";\nimport NumberCard from \"./components/NumberCard\";\nimport PercentageCard from \"./components/PercentageCard\";\nimport BarChart from \"./components/barChart/BarChart\";\nimport DoughnutChart from \"./components/doughnutChart/DoughnutChart\";\nimport TopicsChart from \"./components/topicsChart/TopicsChart\";\n\nimport Advert from \"@/components/specific/advert/Advert\";\nimport useGetProdegreeInfo from \"@/components/conventional/customHooks/useGetProdegreeInfo\";\n\nimport classesAddedIcon from \"@/assets/pages/activityPage/classesAddedIcon.svg\";\nimport classesCompletedIcon from \"@/assets/pages/activityPage/classesCompletedIcon.svg\";\nimport hoursWatchedIcon from \"@/assets/pages/activityPage/hoursWatchedIcon.svg\";\n\nimport { COLORS, TIME_WATCHED } from \"@/utils/Constants\";\nimport { BASE_URL } from \"@/utils/Url\";\nimport {\n    secondsToHms,\n    getUniqueCategoriesAndTheirTotalTimeWatched,\n    getTotalVideoSecondsWatched,\n    videoDurationToSeconds,\n    getLoopCount,\n    getDayPrefix\n} from \"@/utils/Utils\";\n\nimport { updateCreatedClasses } from \"@/store/global/slice/ClassSlice\";\n\nimport \"./ActivityPage.scss\";\n\nconst {\n    choiceBlue,\n    choiceGreen,\n    choicePurple,\n    choiceLightBlue,\n    choiceLightGreen,\n    choiceLightPurple,\n    choiceRed,\n    choiceLightRed,\n    choiceYellow,\n    choiceLightYellow\n} = COLORS;\n\nconst ActivityPage = () => {\n    //------------------------------------------------------------------------------------------\n    //Helpers\n    //------------------------------------------------------------------------------------------\n    const dispatch = useDispatch();\n    const data = useGetProdegreeInfo();\n\n    //------------------------------------------------------------------------------------------\n    //Store\n    //------------------------------------------------------------------------------------------\n    const { userToken } = useSelector((state) => state.auth);\n    const { createdClasses } = useSelector((state) => state.class);\n\n    //------------------------------------------------------------------------------------------\n    //State\n    //------------------------------------------------------------------------------------------\n    const [proDegrees, setProDegrees] = useState([]);\n    const [hoursWatched, setHoursWatched] = useState();\n    const [secondsWatched, setSecondsWatched] = useState();\n    const [classTimeCompleted, setClassTimeCompleted] = useState();\n    const [classesCompleted, setClassesCompleted] = useState();\n    const [classesCompletedPercent, setClassesCompletedPercent] = useState();\n    const [doughnutChartDetails, setDoughnutChartDetails] = useState();\n    const [barChartTimeWatched, setBarChartTimeWatched] = useState([]);\n    const [topicsSectionData, setTopicsSectionData] = useState([]);\n    const [topicsTotalTime, setTopicsTotalTime] = useState(0);\n    const [difficultiesPercent, setDifficultiesPercent] = useState({\n        b: 0,\n        i: 0,\n        a: 0\n    });\n    const [difficultiesTime, setDifficultiesTime] = useState({\n        b: 0,\n        i: 0,\n        a: 0\n    });\n\n    //------------------------------------------------------------------------------------------\n    //TIME WATCHED (BAR CHART)\n    //------------------------------------------------------------------------------------------\n    const calculateTimeWatched = useCallback(() => {\n        //Dummy data\n        // const proDegrees = [\n        //     {\n        //         title: \"ARTS\",\n        //         categories: TIME_WATCHED\n        //     },\n        //     {\n        //         title: \"COMPUTER SCIENCE\",\n        //         categories: TIME_WATCHED\n        //     },\n        //     {\n        //         title: \"BANKING\",\n        //         categories: TIME_WATCHED\n        //     },\n        //     {\n        //         title: \"SOCIAL MEDIA INFLUENCE\",\n        //         categories: TIME_WATCHED\n        //     },\n        //     {\n        //         title: \"GOLFER\",\n        //         categories: TIME_WATCHED\n        //     }\n        // ];\n\n        //Get todays date\n        const todaysDate = moment().format(\"DD-MM-YY\");\n        //Get the day of the week (this is returned in numbers ranging from 1(monday) - 7(sunday)\n        // let dayOfTheWeek = moment(`${todaysDate}`, \"DD-MM-YY\").day();\n        let dayOfTheWeek = moment(todaysDate, \"DD-MM-YY\").day();\n\n        /*\n        Our check should always span two weeks.\n        Take for instance if today is Tuesday it means, we need to get time watched from last week monday(cause our graph starts from monday) till today\n        same goes for any other day.\n\n        Hence after getting todays date we need to keep going through every previous day(loop count) until we arrive at last week monday\n        for monday, we go back 7 times to get to the last week monday\n        for tuesday, we go back 8 times to get to the last week monday\n        for wednesday, we go back 9 times to get to the last week monday\n\n        Im sure you get the gist by now.\n        While going through every previous day, we store the time spent watching videos for that day\n        */\n        let loopCount = getLoopCount(dayOfTheWeek);\n        let ALL_TIME = [];\n\n        // console.log(loopCount);\n\n        for (let i = 0; i <= loopCount; i++) {\n            // let activeDate = moment(todaysDate).clone().subtract(i, \"days\").format(\"DD-MM-YY\");\n            let activeDate = moment(todaysDate, \"DD-MM-YY\").clone().subtract(i, \"days\").format(\"DD-MM-YY\");\n            let timeRangesForActiveDate = [];\n\n            proDegrees.forEach((proDegree) => {\n                //Loop through all videos in datatbase\n                proDegree.categories.forEach((video) => {\n                    //Loop through the dateTime array in one video\n                    video.dataTime.forEach((time, index) => {\n                        //If the active date we are considering exists\n                        if (time === activeDate) {\n                            timeRangesForActiveDate.push(video.data[index]);\n                        }\n                    });\n                });\n            });\n\n            //Convert the range into single values\n            const timeValuesForActiveDate = timeRangesForActiveDate.map((range) => {\n                const value = range.split(\"-\");\n\n                //if second index doesnt exist then range wasnt really a range but instead just a value\n                if (value[1] === undefined) {\n                    return 0;\n                } else {\n                    return value[1] - value[0];\n                }\n            });\n\n            const totalTimeSentInTheDay = timeValuesForActiveDate.reduce((total, a) => {\n                return total + a;\n            }, 0);\n\n            const dayOfTheWeek = moment(activeDate, \"DD-MM-YY\").day();\n            const dayOfTheWeekPrefix = getDayPrefix(dayOfTheWeek);\n\n            const structure = {\n                date: activeDate,\n                totalTime: totalTimeSentInTheDay,\n                initial: dayOfTheWeekPrefix,\n                number: dayOfTheWeek\n            };\n\n            ALL_TIME.push(structure);\n        }\n\n        //reorder array to start from last week monday\n        const reversed = ALL_TIME.reverse();\n        const ultimate = [];\n        for (let i = 0; i < reversed.length; i++) {\n            if (i > 6) {\n                const valueToEdit = ultimate[i - 7];\n                const a = [\n                    ...valueToEdit,\n                    {\n                        date: reversed[i].date,\n                        timeInSec: reversed[i].totalTime\n                    }\n                ];\n                ultimate[i - 7] = a;\n            } else {\n                const a = {\n                    date: reversed[i].date,\n                    timeInSec: reversed[i].totalTime\n                };\n\n                ultimate.push([a]);\n            }\n        }\n\n        setBarChartTimeWatched(ultimate);\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //CATEGORIES (Doughnut chart)\n    //------------------------------------------------------------------------------------------\n    const sortCategorizeIntoMostWatchedForDoughnutChart = useCallback(() => {\n        //Get the unique categories from each prodegree.\n        //Unique because more than one video may have the same category\n        const uniqueCategories = proDegrees.map((item) => {\n            return getUniqueCategoriesAndTheirTotalTimeWatched(item.categories);\n        });\n\n        //Joined the categories in all prodegrees together\n        let joinedCategories = [];\n        uniqueCategories.forEach((item) => {\n            item.forEach((data) => {\n                joinedCategories.push(data);\n            });\n        });\n\n        //Arranged categories from highest time spent to lowest\n        const sortedCategories = joinedCategories.sort((a, b) => {\n            //We are comparing the time by seconds and the index 2 has the seconds value\n            return b.sec - a.sec;\n        });\n\n        setDoughnutChartDetails(sortedCategories);\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //TOPICS\n    //------------------------------------------------------------------------------------------\n    const calculateTopicsSpent = useCallback(() => {\n        //loop through each prodegree in all prodegrees\n        let allTopicsSet = new Set();\n        const eachProdegreeTopics = proDegrees.map((proDegree) => {\n            //in each prodegree loop through watched videos\n            const topicsInVideo = proDegree.categories.map((video) => {\n                let topicsInThisProdegree = {};\n                const timeSpentOnTopic = video.totalWatched;\n                //in each watched video get the topics/skills associated to it\n                video.class.topics.forEach((topic) => {\n                    topicsInThisProdegree = {\n                        ...topicsInThisProdegree,\n                        [topic]: timeSpentOnTopic\n                    };\n                    allTopicsSet.add(topic);\n                });\n                return topicsInThisProdegree;\n            });\n\n            return topicsInVideo;\n        });\n\n        const allTopicsArray = [...allTopicsSet];\n\n        let allTopicsAndAllTime = {};\n\n        for (let index in allTopicsArray) {\n            let topic = allTopicsArray[index];\n\n            eachProdegreeTopics.forEach((proDegree) => {\n                proDegree.forEach((videoTopics) => {\n                    // if no time value exists for this topic, get out of my loop\n                    if (videoTopics[topic] === undefined) return;\n\n                    //check it the topic already exists in our object\n                    if (allTopicsAndAllTime[topic]) {\n                        allTopicsAndAllTime = {\n                            ...allTopicsAndAllTime,\n                            [topic]: allTopicsAndAllTime[topic] + videoTopics[topic]\n                        };\n                        return;\n                    }\n\n                    allTopicsAndAllTime = {\n                        ...allTopicsAndAllTime,\n                        [topic]: videoTopics[topic]\n                    };\n                });\n            });\n        }\n\n        const getTotalTimeOnTopics = Object.values(allTopicsAndAllTime).reduce((total, index) => {\n            return total + index;\n        }, 0);\n\n        let topicsWithMoreDetails = [];\n\n        Object.entries(allTopicsAndAllTime).forEach((item) => {\n            const a = {\n                title: item[0],\n                timeInSec: item[1],\n                timeInHms: secondsToHms(item[1]),\n                percentage: ((item[1] / getTotalTimeOnTopics) * 100).toFixed(2)\n            };\n            topicsWithMoreDetails.push(a);\n        });\n\n        const sorted = topicsWithMoreDetails.sort((a, b) => {\n            return b.timeInSec - a.timeInSec;\n        });\n\n        setTopicsTotalTime(getTotalTimeOnTopics);\n        setTopicsSectionData(sorted);\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //Current Prodegrees\n    //------------------------------------------------------------------------------------------\n    const getDegreeColors = useCallback((title) => {\n        switch (title) {\n            case \"Art & Design\":\n                return {\n                    color: choiceGreen,\n                    trailColor: choiceLightGreen\n                };\n            case \"Computer Science\":\n                return {\n                    color: choiceBlue,\n                    trailColor: choiceLightBlue\n                };\n            case \"Business\":\n                return {\n                    color: choiceRed,\n                    trailColor: choiceLightRed\n                };\n            case \"Academics\":\n                return {\n                    color: choicePurple,\n                    trailColor: choiceLightPurple\n                };\n            case \"Lifestyle\":\n                return {\n                    color: choiceYellow,\n                    trailColor: choiceLightYellow\n                };\n        }\n    }, []);\n    const renderProdegrees = useCallback(() => {\n        if (proDegrees.length === 0) {\n            return null;\n        } else {\n            return proDegrees.map((proDegree, index) => {\n                const { title, degreeType, obtainedCredits, availableCredits } = proDegree;\n                const degreeColors = getDegreeColors(title);\n                return proDegree.categories.length !== 0 ? (\n                    <div className=\"section\" key={index}>\n                        <CourseCard\n                            title={title}\n                            level={degreeType}\n                            color={degreeColors.color}\n                            trailColor={degreeColors.trailColor}\n                            currentCredits={obtainedCredits}\n                            totalCredits={availableCredits}\n                        />\n                    </div>\n                ) : null;\n            });\n        }\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //HOURS WATCHED\n    //------------------------------------------------------------------------------------------\n    const calculateTotalHoursWatched = useCallback(() => {\n        const totalHoursWatched = proDegrees.reduce((total, item) => {\n            return total + item.totalHoursWatched;\n        }, 0);\n        setHoursWatched(totalHoursWatched.toFixed(1));\n        setSecondsWatched(getTotalVideoSecondsWatched(proDegrees));\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //CLASS TIME COMPLETED - (PERCENTAGE) hours watched out of total amount of hours available\n    //------------------------------------------------------------------------------------------\n    const calculateClassTimeCompleted = useCallback(() => {\n        //Get total amount of hours available\n        const eachProDegreeTotalSeconds = proDegrees.map((item) => {\n            const totalSecondsForAllVideosInThisProDegree = item.categories.reduce((total, video) => {\n                ///////////////////////\n                //Convert each videos duration to seconds\n                const totalSecondsForOneVideo = videoDurationToSeconds(video.videoDuration);\n\n                return totalSecondsForOneVideo + total;\n            }, 0);\n\n            return totalSecondsForAllVideosInThisProDegree;\n        });\n        const totalSecondsOnAllProdegrees = eachProDegreeTotalSeconds.reduce((total, item) => {\n            return total + item;\n        }, 0);\n        //Calculate total seconds user has watched in all prodegrees\n        const totalSecondsonAllProdegreesWatchedByUser = proDegrees.reduce((total, item) => {\n            return total + item.totalSecondsWatched;\n        }, 0);\n        const classTimeCompleted = (totalSecondsonAllProdegreesWatchedByUser / totalSecondsOnAllProdegrees) * 100;\n        setClassTimeCompleted(classTimeCompleted.toFixed(1));\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //CLASSES COMPLETED(Number)\n    //------------------------------------------------------------------------------------------\n    const calculateClassesCompleted = useCallback(() => {\n        //compare if the watched time is the same as the entire video duration\n        const allProDegreesCompletedClassesArray = proDegrees.map((item) => {\n            const eachProDegreeCompletedClasses = item.categories.filter((video) => {\n                const totalVideoDuration = videoDurationToSeconds(video.class.duration);\n                return totalVideoDuration === video.totalWatched;\n            });\n\n            return eachProDegreeCompletedClasses.length;\n        });\n        const allProDegreesCompletedClasses = allProDegreesCompletedClassesArray.reduce((total, item) => {\n            return total + item;\n        }, 0);\n        setClassesCompleted(allProDegreesCompletedClasses);\n\n        const allClassesViewedByUser = proDegrees.reduce((total, item) => {\n            return total + item.categories.length;\n        }, 0);\n        const classesCompletedPercent = (allProDegreesCompletedClasses / allClassesViewedByUser) * 100;\n        setClassesCompletedPercent(classesCompletedPercent);\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //DIFFICULTY\n    //------------------------------------------------------------------------------------------\n    const categorizeVideosIntoDifficulties = useCallback(() => {\n        let beginner = [];\n        let intermediate = [];\n        let advanced = [];\n        //assign videos to their difficulty level\n        proDegrees.forEach((item) => {\n            item.categories.forEach((video) => {\n                if (video.class.difficulty === \"Beginner\") {\n                    beginner.push(video);\n                    return;\n                } else if (video.class.difficulty === \"Intermediate\") {\n                    intermediate.push(video);\n                    return;\n                } else if (video.class.difficulty === \"Advanced\") {\n                    advanced.push(video);\n                    return;\n                }\n            });\n        });\n        const beginnerTotalTimeInSec = beginner.reduce((total, item) => {\n            return total + item.totalWatched;\n        }, 0);\n        const intermediateTotalTimeInSec = intermediate.reduce((total, item) => {\n            return total + item.totalWatched;\n        }, 0);\n        const advancedTotalTimeInSec = advanced.reduce((total, item) => {\n            return total + item.totalWatched;\n        }, 0);\n        const totalTimeWatched = beginnerTotalTimeInSec + intermediateTotalTimeInSec + advancedTotalTimeInSec;\n        const beginnerPercent = (beginnerTotalTimeInSec / totalTimeWatched) * 100;\n        const intermediatePercent = (intermediateTotalTimeInSec / totalTimeWatched) * 100;\n        const advancedPercent = (advancedTotalTimeInSec / totalTimeWatched) * 100;\n\n        setDifficultiesTime({\n            ...difficultiesTime,\n            b: secondsToHms(beginnerTotalTimeInSec),\n            i: secondsToHms(intermediateTotalTimeInSec),\n            a: secondsToHms(advancedTotalTimeInSec)\n        });\n\n        setDifficultiesPercent({\n            ...difficultiesPercent,\n            b: `${beginnerPercent.toFixed(2)}%`,\n            i: `${intermediatePercent.toFixed(2)}%`,\n            a: `${advancedPercent.toFixed(2)}%`\n        });\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //Fire these functions once prodegrees is set\n    //------------------------------------------------------------------------------------------\n    useEffect(() => {\n        if (proDegrees) {\n            categorizeVideosIntoDifficulties();\n            sortCategorizeIntoMostWatchedForDoughnutChart();\n            calculateTotalHoursWatched();\n            calculateClassTimeCompleted();\n            calculateClassesCompleted();\n            calculateTopicsSpent();\n            calculateTimeWatched();\n        }\n    }, [proDegrees]);\n\n    //------------------------------------------------------------------------------------------\n    //When data loads then assign them to our prodegrees\n    //------------------------------------------------------------------------------------------\n    useEffect(() => {\n        if (data) {\n            setProDegrees(data.proDegrees);\n        }\n    }, [data]);\n\n    //------------------------------------------------------------------------------------------\n    //Get all classes Added (CLASSES ADDED)\n    //------------------------------------------------------------------------------------------\n    useEffect(() => {\n        axios\n            .get(`${BASE_URL}/class/created`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${userToken}`\n                }\n            })\n            .then((res) => {\n                dispatch(updateCreatedClasses(res.data));\n            })\n            .catch((err) => {\n                alert(err);\n            });\n    }, []);\n\n    return (\n        <div id=\"activity-page\">\n            <div className=\"activity-page\">\n                <Advert />\n                <div className=\"activity-page__body\">\n                    <h1 className=\"activity-page__title\">Learning Breakdown</h1>\n                    <div className=\"activity-page__content\">\n                        <div className=\"activity-page__content__left-column\">\n                            {/* These course cards wont show on desktop */}\n                            <div className=\"course-card-section-wrapper\">{renderProdegrees()}</div>\n\n                            {/* Time watched bar chart */}\n                            <div className=\"section bar-chart-wrapper\">\n                                <div className=\"bar-chart-wrapper__header\">\n                                    <h1>Time watched</h1>\n                                    <div className=\"legend\">\n                                        <div className=\"legend__item\">\n                                            <span style={{ backgroundColor: \"#4389F8\" }}></span>\n                                            <h5>Last Week</h5>\n                                        </div>\n                                        <div className=\"legend__item\">\n                                            <span style={{ backgroundColor: \"rgba(67, 137, 248, 0.3)\" }}></span>\n                                            <h5>This week</h5>\n                                        </div>\n                                        <div className=\"legend__item\">\n                                            <span style={{ backgroundColor: \"#29C677\" }}></span>\n                                            <h5>Goal Met</h5>\n                                        </div>\n                                        <div className=\"legend__item\">\n                                            <span style={{ backgroundColor: \"rgba(41, 198, 119, 0.3)\" }}></span>\n                                            <h5>Goal Met</h5>\n                                        </div>\n                                    </div>\n                                </div>\n                                <BarChart data={barChartTimeWatched} />\n                            </div>\n\n                            {/* Categories doughnut chart */}\n                            <div className=\"section\">\n                                <h1>Categories</h1>\n                                <div className=\"doughtnut-chart-wrapper\">\n                                    <DoughnutChart categories={doughnutChartDetails} totalTimeInSec={secondsWatched} />\n                                </div>\n                            </div>\n\n                            {/* Topics bar */}\n                            <TopicsChart data={topicsSectionData} totalTimeInSec={topicsTotalTime} />\n                        </div>\n\n                        {/* Right column */}\n                        <div className=\"activity-page__content__right-column\">\n                            {/* These course cards will show in desktop only */}\n                            <div className=\"course-card-section-wrapper row\">{renderProdegrees()}</div>\n\n                            {/* Classes Added */}\n                            <div className=\" row\">\n                                <NumberCard\n                                    number={createdClasses.length}\n                                    label=\"Classes Added\"\n                                    img={classesAddedIcon}\n                                    color=\"#29C677\"\n                                />\n                            </div>\n\n                            {/* Hours watched */}\n                            <div className=\"row\">\n                                <NumberCard\n                                    number={hoursWatched}\n                                    label=\"Hours Watched\"\n                                    img={hoursWatchedIcon}\n                                    color=\"#4389F8\"\n                                />\n                            </div>\n\n                            {/* Class Time completed */}\n                            <div className=\"row\">\n                                <PercentageCard\n                                    percent={\n                                        classTimeCompleted === undefined || classTimeCompleted === \"NaN\"\n                                            ? \"0\"\n                                            : classTimeCompleted\n                                    }\n                                    label=\"Class Time Completed\"\n                                    color={choiceBlue}\n                                    trailColor={choiceLightBlue}\n                                />\n                            </div>\n\n                            {/* Classes completed percentage*/}\n                            <div className=\"row\">\n                                <PercentageCard\n                                    percent={Number.isNaN(classesCompletedPercent) ? \"0\" : classesCompletedPercent}\n                                    label=\"Classes Completed\"\n                                    color={choicePurple}\n                                    trailColor={choiceLightPurple}\n                                />\n                            </div>\n\n                            {/* Classes completed number */}\n                            <div className=\"row\">\n                                <NumberCard\n                                    number={classesCompleted}\n                                    label=\"Classes Completed\"\n                                    img={classesCompletedIcon}\n                                    color=\"#6A28E6\"\n                                />\n                            </div>\n\n                            {/* Difficulty */}\n                            <div className=\"section difficulty row\">\n                                <h1>Difficulty</h1>\n                                <div\n                                    className=\"difficulty__color-summary\"\n                                    style={{\n                                        display: \"grid\",\n                                        gridTemplateColumns: `${difficultiesPercent.b} ${difficultiesPercent.i} ${difficultiesPercent.a}`,\n                                        gridGap: \"5px\"\n                                    }}\n                                >\n                                    <span style={{ backgroundColor: choiceRed }}></span>\n                                    <span style={{ backgroundColor: choiceYellow }}></span>\n                                    <span style={{ backgroundColor: choiceGreen }}></span>\n                                </div>\n\n                                {difficultiesPercent.b !== \"NaN%\" ? (\n                                    <>\n                                        <div className=\"difficulty__level\">\n                                            <div className=\"difficulty__level__info\">\n                                                <h3>\n                                                    <span\n                                                        className=\"color-code\"\n                                                        style={{ backgroundColor: choiceGreen }}\n                                                    ></span>\n                                                    Beginner\n                                                </h3>\n                                                <h5>\n                                                    {difficultiesPercent.b} | {difficultiesTime.b}\n                                                </h5>\n                                            </div>\n                                        </div>\n                                        <div className=\"difficulty__level\">\n                                            <div className=\"difficulty__level__info\">\n                                                <h3>\n                                                    <span\n                                                        className=\"color-code\"\n                                                        style={{ backgroundColor: choiceYellow }}\n                                                    ></span>\n                                                    Intermediate\n                                                </h3>\n                                                <h5>\n                                                    {difficultiesPercent.i} | {difficultiesTime.i}\n                                                </h5>\n                                            </div>\n                                        </div>\n                                        <div className=\"difficulty__level\">\n                                            <div className=\"difficulty__level__info\">\n                                                <h3>\n                                                    <span\n                                                        className=\"color-code\"\n                                                        style={{ backgroundColor: choiceRed }}\n                                                    ></span>\n                                                    Advanced\n                                                </h3>\n                                                <h5>\n                                                    {difficultiesPercent.a} | {difficultiesTime.a}\n                                                </h5>\n                                            </div>\n                                        </div>\n                                    </>\n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ActivityPage;\n"],"sourceRoot":""}